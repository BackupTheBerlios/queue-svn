{\rtf1\ansi\ansicpg1252\deff0\deflang2055\deflangfe2055\deftab708{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\froman\fprq2\fcharset2 Symbol;}}
{\stylesheet{ Normal;}{\s1 heading 1;}{\s2 heading 2;}{\s3 heading 3;}{\s4 heading 4;}}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\sb240\sa60\qc\lang2057\kerning28\b\f0\fs32 Developer Guide\par
\pard\kerning0\b0\f1\fs24\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
Date: 2005-06-21\par
Authors: Basil Fierz, Severin Hacker, Andreas K\'e4gi, Benjamin Sigg\par
\pard\keepn\s1\sb240\sa60\kerning32\b\f0\fs32\par
\par
\page Models\par
\pard\kerning0\b0\f1\fs24 In this section we will look at the displayable models the game contains and which constraints hold.\par
The models will be loaded from an ASE file. But not only the model is stored there, its bounding shapes are also defined in the ASE files. It is possible to replace the existing models by new ones which must obey the following constraints.\par
\pard\keepn\s3\sb240\sa60\b\f0\fs26 Table model\par
\pard\b0\f1\fs24 The table model has to provide certain shapes which describe the bounding of the table. The bounding contains the banks and the holes.\par
The model loader looks for named shapes in the model:\par
\pard\fi-360\li720\tx720\f2\'b7\tab\f1\ldblquote shape_bande\rdblquote , which describes the surrounding bounds of the play field. Its z position has to be zero.\par
\pard\fi-360\li720\f2\'b7\tab\f1\ldblquote shape_loch_xx\rdblquote , where xx is the number of the hole. They have to be placed directly on the table.\par
\pard\par
The table has to be aligned in a special way. The long side has to be along the x axis, the short side along the y axis and the height along the z axis.\par
\pard\keepn\s3\sb240\sa60\b\f0\fs26 Ball model\par
\pard\b0\f1\fs24 The ball is a simple sphere with a diffuse texture map. Its radius has to be the same like the height value of the banks.\par
\par
\pard\keepn\s1\sb240\sa60\kerning32\b\f0\fs32 Game Modes\par
\pard\keepn\s2\sb240\sa60\kerning0\i\fs28 Adding a new game mode\par
\pard\b0\i0\f1\fs24 If you want to add a new game mode (like snooker or carambol) to the existing game you can do one of the following:\par
\pard\fi-360\li720\tx720\f2\'b7\tab\f1 inherit from Q_MODE and implement all deferred features (not recommended)\par
\f2\'b7\tab\f1 inherit from Q_ABSTRACT_MODE and implement the missing deferred features and overwrite some of its features (recommended if your game is conceptually different, like having new menus or a different game flow from Q_8BALL and Q_ETH modes)\par
\pard\fi-360\li720\f2\'b7\tab\f1 inherit from Q_8BALL and overwrite some of its features (recommended if almost everything is the same (same menus, two players, balls don\rquote t come out of hole once they have fallen, etc.) as in 8ball mode except its rules)\par
\pard\keepn\s3\sb240\sa60\b\f0\fs26 Q_ABSTRACT_MODE\par
\pard\b0\f1\fs24 The Q_ABSTRACT_MODE class does the following for you:\par
\pard\fi-360\li720\tx720\f2\'b7\tab\f1 reads physical data (weight,etc.) for balls from an ini file and assigns them to balls\par
\pard\fi-360\li720\f2\'b7\tab\f1 creates a default table model from a file (it is the standard 8ball table)\par
\f2\'b7\tab\f1 creates the ball models from files (you only have to say what texture you want)\par
\f2\'b7\tab\f1 installs itself i.e. setting lights, camera, etc. to default values \par
\f2\'b7\tab\f1 can check whether a position for a ball is valid, i.e. no other ball or bank or hole is colliding with your ball\par
\f2\'b7\tab\f1 gives you features that read from a collision list and generate useful structures such as all balls that have fallen into the last shot or all touched banks\par
\f2\'b7\tab\f1 can delete balls from the table automatically once they have fallen into a hole\par
\pard\par
As you can see, the class Q_ABSTRACT_MODE contains a lot of common functionality between the different modes. However you certainly have to implement the following things yourself (and some one-line features): \par
\pard\fi-360\li720\tx720\f2\'b7\tab\f1 a next state feature which decides what to do after the physical simulation has finished according to your rules\par
\f2\'b7\tab\f1 a feature that assigns ball numbers to texture names\par
\pard\keepn\s2\sb240\sa60\b\i\f0\fs28 Game states\par
\pard\b0\i0\f1\fs24 The question you might ask is: what exactly do I have to return in the next state feature? The answer is: an object of class Q_GAME_STATE. The game states control the game flow and the interaction with the user(s). The design idea behind the game states is that each game state handles exactly one user-interaction. We have, so far, found the following game states (-> means the default state after the user has pressed the space button on the keyboard):\par
\pard\fi-360\li720\tx720\f2\'b7\tab\f1 Q_RESET_STATE: the user may reset a ball on the table (like the white ball in 8 ball mode) -> Q_AIM_STATE\par
\f2\'b7\tab\f1 Q_BIRD_STATE: the user can fly over the table -> Q_AIM_STATE\par
\f2\'b7\tab\f1 Q_AIM_STATE: the user can set the direction of the shot -> Q_SPIN_STATE\par
\f2\'b7\tab\f1 Q_SPIN_STATE: the user can set the point where the ball is exactly hit -> Q_SHOT_STATE\par
\f2\'b7\tab\f1 Q_SHOT_STATE: the user can set the strength of the shot and starts the simulation -> Q_SIMULATION_STATE\par
\pard\fi-360\li720\f2\'b7\tab\f1 Q_SIMULATION_STATE: checks whether the simulation has finished (or we must delete balls from the table) and calls the mode\rquote s next_state feature upon completion\par
\pard\par
These are all abstract classes. Again, you have the following options:\par
\pard\fi-360\li720\tx720\f2\'b7\tab\f1 inherit from the abstract states and implement the features yourself. This allows you to change the control flow of your game (e.g. you want to skip the spin state) or you want to add your own information HUD component (see later). \par
\pard\fi-360\li720\f2\'b7\tab\f1 inherit from the 8ball states or from the eth states\par
\f2\'b7\tab\f1 use the 8ball states without modifications (then your mode has to inherit from Q_8BALL)\par
\pard\par
It is highly recommended to have a look at the classes Q_ETH and Q_8BALL to understand the details of each step. Of course you can also define your own game states if your mode has some special features which we might have forgotten.\par
\pard\keepn\s1\sb240\sa60\kerning32\b\f0\fs32 OpenGL\par
\pard\keepn\s2\sb240\sa60\kerning0\i\fs28 Create an own OpenGL-Tree\par
\pard\nowidctlpar\sa120\lang1033\b0\i0\f1\fs24 If you just want to use queue as a library, then you can use the Q_GL_MANAGER to instantiate a valid OpenGL-tree.\par
With the manager, you can draw three-dimenional objects and a hud (2d-components like buttons). The hud will automatically be listening to the events (like mouse-events), and react.\par
The Q_GL_MANAGER also allows you to translate coordinates from the hud into the world, and vice versa.\par
\pard\keepn\s2\sb240\sa60\lang2057\b\i\f0\fs28 Elements of a tree\par
\pard\nowidctlpar\sa120\lang1033\b0\i0\f1\fs24 An OpenGL-tree consists of several elements. Assuming you made a Q_GL_MANAGER (this is the standard way to create a tree), you can use the following elements:\par
\pard\keepn\s3\sb240\sa60\lang2057\b\f0\fs26 World\par
\pard\keepn\s4\sb240\sa60\f1\fs28 The Q_GL_Object\par
\pard\nowidctlpar\sa120\lang1033\b0\fs24 The basic element of the 3d-part of the tree (called the \ldblquote world\rdblquote ). An object only has one feature: \ldblquote draw\rdblquote . In this feature, you have access to a q_gl_drawable, a list of all commands available in OpenGL.\par
Normally, an object will be a simple figure, like a sphere, a cube, a light, etc.\par
\pard\keepn\s4\sb240\sa60\lang2057\b\fs28 The Q_GL_Group\par
\pard\nowidctlpar\sa120\lang1033\b0\fs24 One object alone is boring. So the group allows you to combine several objects to one new object.\par
\pard\keepn\s4\sb240\sa60\lang2057\b\fs28 The Q_GL_Transform\par
\pard\nowidctlpar\sa120\lang1033\b0\fs24 Transforms are used to do things like rotating, translating, changing settings (enabling/disabling the alpha_func for example).\par
To use a transform, create a Q_GL_TRANSFORMED_GROUP. There you can set any transform you like, and before the objects of the group are drawn, the transform can do its work.\par
\pard\keepn\s3\sb240\sa60\lang2057\b\f0\fs26 HUD\par
\pard\nowidctlpar\sa120\lang1033\b0\f1\fs24 You can add things like buttons, textfields, checkboxes and others to the screen.\par
All these things are instances of Q_HUD_COMPONENT.\par
On one hand, the components are semitransparent; on the other hand, more than one layer has to be drawn for each component. This generates a huge problem: the depthtest (see GL_DEPTH_TEST in a OpenGL documentation) cannot be used. So the order, when a component is drawn, matters. What is farer away must be drawn first, and it is absolutely impossible to draw two components which have an intersection.\par
The first part, drawing in the right order, is managed by the Q_GL_ROOT_PANE, for the other part (no intersections), you are responsible.\par
\pard\keepn\s4\sb240\sa60\lang2057\b\fs28 The Q_HUD_COMPONENT\par
\pard\nowidctlpar\sa120\lang1033\b0\fs24 The component is the basic part of a hud. A component is nothing more than a rectangle in space.\par
Every component has a feature \ldblquote draw\rdblquote . In this feature, the component has to be drawn (if it is visible), but only coordinates with z equal to 0, x between 0 and \ldblquote width\rdblquote  and y between 0 and \ldblquote height\rdblquote  should be used.\par
If a component should be informed, when the user pushes a mouse button over it, the field \ldblquote enabled\rdblquote  must be set to true.\par
If keyboard-events should be processed too, the field \ldblquote enabled\rdblquote  and the field \ldblquote focusable\rdblquote  must be set to true. Not enabled implies not focusable.\par
\pard\keepn\s4\sb240\sa60\lang2057\b\fs28 The Q_HUD_CONTAINER\par
\pard\nowidctlpar\sa120\lang1033\b0\fs24 A container allows you to collect several components (and a container itself is a component). A container can set, where his children are drawn. To do so, override the \ldblquote enqueue\rdblquote -feature. You must apply some modifications to the Q_HUD_QUEUE-object (there are features to allow rotations or translations), and then invoke the precursor.\par
A container should be invisible, not focusable and not enabled.\par
For a simple example, see the Q_HUD_LOOPING.\par
\pard\keepn\s3\sb240\sa60\lang2057\b\f0\fs26 Camera\par
\pard\nowidctlpar\sa120\lang1033\b0\f1\fs24 The user wants to influence the position and the view direction of the camera, so he can see the world from different viewpoints.\par
Assuming you have a Q_GL_MANAGER, you can set a Q_CAMERA_BEHAVIOUR. A behaviour listens to mouse and/or keyboard-events, and can then influence the camera in some ways.\par
If you don't have a Q_GL_MANAGER, take a Q_HUD_CAMERA_NAVIGATOR, apply an Q_CAMERA and a behaviour to it, and if you use the camera as first transformation of the OpenGL-tree, you will have the same result as if you used a manager.\par
\pard\keepn\s1\sb240\sa60\lang2057\kerning32\b\f0\fs32 Appendix A \endash  Comparison to the SRS\par
\pard\kerning0\b0\f1\fs24 Basically the SRS is fully implemented in the game.\par
}
